Platform: I created a Nodejs server and used the Express web framework. In addition, I used the Express generator to create a skeleton app for me. It made the development process simpler since I did not have to edit or create many files.
In app.js, I changed the view engine to ejs from jade, because I liked that I could use both HTML and JavaScript-like syntax in ejs files.

Third-Party Libraries:
-dotenv: I used this to store my client id and client secret as environment variables in a .env file. This is a better practice than hardcoding the client secret in the JavaScript code. If I were uploading to GitHub, I would have GitHub ignore my file so that no one can see the secret.
-ejs: I used this because .ejs files act like HTML files that can be embedded with JavaScript code. I used the parameters that I passed to the file in order to populate the table, user id, and playlist id fields.
-spotify-web-api-node: This library gave an API for accessing resources from Spotify without having to formulate the HTTP request myself. It prevented me from making mistakes in the url that I would've had to use for an HTTP request. The documentation is thorough and can be found here: https://github.com/thelinmichael/spotify-web-api-node

Notes: All files except index.ejs, result.ejs, error.ejs, and playlist.js were generated by the Express generator.

Architecture: When the server is started, navigate to localhost:3000 to see the homepage (index.ejs).
From there, enter the desired playlist id and user id, and press submit.
Then result.ejs will load with the table populated with the applicable playist information.
If desired, click on the Select New Playlist button to be redirected back to the homepage in order to input a new playlist.

Example API calls using spotify-web-api-node: 
    1. Require the library
    var SpotifyWebApi = require('spotify-web-api-node');
    2. Create a SpotifyWebApi object with a client id and secret
    var spotifyApi = new SpotifyWebApi({
        clientId: <insery client id>,
        clientSecret: <insert client secret>
    });
    3. Get an access token
    spotifyApi.clientCredentialsGrant().then(function (data) {
        spotifyApi.setAccessToken(data.body['access_token']);
        //do other things
    });
    4. Get tracks in a playlist
    (req is used to get form data after it was submitted)
    spotifyApi.getPlaylistTracks(req.query['userid'], req.query['playlistid'], {
        fields: 'items'
    }).then(function (data) {
        //parse data
    });
    5. Get audio features for multiple tracks:
    spotifyApi.getAudioFeaturesForTracks(tracks.trackIds)
    .then(function (data) {
        //parse data
    });

Run instructions:
From the top level folder (PlaylistApp) in a command line window, enter 
$ npm install
$ npm start
